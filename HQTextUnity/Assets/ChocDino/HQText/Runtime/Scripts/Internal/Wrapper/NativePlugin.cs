//--------------------------------------------------------------------------//
// Copyright 2024-2024 Chocolate Dinosaur Ltd. All rights reserved.         //
// For full documentation visit https://www.chocolatedinosaur.com           //
//--------------------------------------------------------------------------//

using System;
using System.Runtime.InteropServices;

namespace ChocDino.HQText.Internal
{
	public class NativePlugin
	{
		public const string DllName = "libHQText";

		//	[System.Runtime.InteropServices.DllImport(dll)]
		// public static extern TextInfo GetTextInfo(string data, string fontname, int fontsize, float
		// lineSpacing, FontBackend backend, int textBoxWidth, int textBoxHeight);

		/// <summary>
		/// Sets the text data for a given render instance
		/// </summary>
		/// <param name="index">The index of the native renderer (generate using  Initialize())</param>
		/// <param name="text">The text to render</param>
		/// <param name="fontname">Name of the font</param>
		/// <param name="fontSize">Font size</param>
		/// <param name="textBoxWidth">Width of the render text box</param>
		/// <param name="textBoxHeight">Height of the render text box</param>
		/// <param name="color">The color to render (usually white)</param>
		/// <param name="horizontalAlignment">Alignment of the text horizontally in the text box</param>
		/// <param name="lineSpacing">Space between lines</param>
		/// <param name="justify"></param>
		/// <param name="autoDirection">Auto calculate text direction (e.g. Right To Left for
		/// Arabic)</param>
		/// <param name="direction">Manually set text direction. Only used if autoDirection is
		/// false.</param>
		/// <param name="verticalAlignment">Vertical alignment in the text box.</param>
		/// <param name="backend">The backend to render with (e.g. Freetype of Win32)</param>
		[DllImport(DllName)]
		public static extern TextInfo SetTextData(uint index,
												string text,
												string fontname,
												string fontFace,
												int fontSize,
												int textBoxWidth,
												int textBoxHeight,
												ColorBlock color,
												HorizontalAlignment horizontalAlignment,
												float lineSpacing,
												int justify,
												int autoDirection,
												Direction direction,
												VerticalAlignment verticalAlignment,
												FontBackend backend,
												HorizontalWrapping wrappingH,
												VerticalWrapping wrappingV,
												int useMarkup,
												float resolutionMultiplier,
												int autoPadding,
												int paddingLeft,
												int paddingRight,
												int paddingTop,
												int paddingBottom);

		/// <summary>
		/// Create a new native instance  of the plugin. For each Initialize() you need to call a
		/// Teardown(index) or it will create a memory leak.
		/// </summary>
		/// <returns>The index of the new instance, each time you call this you will get a new
		/// index</returns>
		[DllImport(DllName)]
		public static extern uint Initialize();

		/// <summary>
		/// Destroys a native instance of the renderer
		/// </summary>
		/// <param name="index">A valid index generated by the Initialize() function</param>
		[DllImport(DllName)]
		public static extern void Teardown(uint index);

		/// <summary>
		/// Is a render event from unity and return its results asyncronously to unity when its done
		/// </summary>
		/// <returns>A pointer to the callback</returns>
		[DllImport(DllName)]
		public static extern IntPtr GetTextureUpdateCallback();

		/// <summary>
		/// Print to the console the data currently saved for a given native instance.
		/// </summary>
		/// <param name="index"></param>
		[DllImport(DllName)]
		public static extern void LogRenderData(uint index);

		/// <summary>
		/// Get a pointer to the render surface
		/// </summary>
		/// <param name="index">The index of the native instance</param>
		/// <returns></returns>
		[DllImport(DllName)]
		public static extern IntPtr GetRenderData(uint index);

		/// <summary>
		/// </summary>
		/// <param name="RenderData"></param>
		/// <returns></returns>
		[DllImport(DllName)]
		public static extern IntPtr RenderToSurface(IntPtr RenderData);

		/// <summary>
		/// Renders a surface to a PNG file, useful for debugging
		/// </summary>
		/// <param name="filepath">Absolute filepath to render</param>
		/// <param name="surface">The surface to render </param>
		/// <returns>nothing</returns>
		[DllImport(DllName)]
		public static extern void WriteToPNG(string filepath, IntPtr surface);

		/// <summary>
		/// Destroy a surface used by the native plugin. This should also be automatically destroyed on
		/// TearDown()
		/// </summary>
		/// <param name="surface">The surface to destroy</param>
		[DllImport(DllName)]
		public static extern void ReleaseSurface(IntPtr surface);

		/// <summary>
		/// TODO: Remove this
		/// </summary>
		/// <param name="font"></param>
		[DllImport(DllName)]
		public static extern void LoadFont(string font);

		/// <summary>
		/// TODO: Remove this
		/// </summary>
		[DllImport(DllName)]
		public static extern void ListFonts();

		/// <summary>
		/// Initialized the freetype config with a font.conf file specified.
		/// </summary>
		/// <param name="pathToConfig">path to a font.conf file</param>
		/// <returns>True on success otherwise false</returns>
		[DllImport(DllName)]
		public static extern bool InitializeFontConfig(string pathToConfig);

		/// <summary>
		/// Checks if the freetype font config is initialized. If it is not initialized, font rendering
		/// with the freetype backend won't work correctly
		/// </summary>
		/// <returns>True if it is initialized otherwise false</returns>

		[DllImport(DllName)]
		public static extern bool FontConfigInitialized();

		/// <summary>
		/// Get a pointer to a list of font families for a given font backend
		/// </summary>
		/// <param name="familyCount">The amount of font families in a given backend</param>
		/// <param name="type">The type of backend to enumerate (freetype or win32)</param>
		/// <returns>A pointer to a list of a font familes</returns>
		[DllImport(DllName)]
		public static extern IntPtr GetAvailableFontFamilies(ref int familyCount, FontBackend type);

		[DllImport(DllName)]
		public static extern IntPtr GetAvailableFontFacesAtIndex(IntPtr families,
																int index,
																ref int n_faces);

		[DllImport(DllName)]
		public static extern IntPtr FreeFontFaces(IntPtr faces);

		[DllImport(DllName)]
		public static extern void GetFontFaceDescriptionAtIndex(IntPtr faces,
																int index,
																ref Weight weight,
																ref Stretch stretch,
																ref Variant variant,
																ref Style style,
																ref Gravity gravity,
																ref bool isSynthetic);

		[DllImport(DllName)]
		public static extern IntPtr GetFontFaceAtIndex(IntPtr faces,
													int index,
													ref int charactersInName);

		/// <summary>
		/// Destroy the list of Font Families generated by GetAvailableFontFamilies()
		/// </summary>
		/// <param name="fontFamilies"> the point to a list of font familes</param>
		[DllImport(DllName)]
		public static extern void FreeFontFamilies(IntPtr fontFamilies);

		/// <summary>
		/// Returns a pointer to a font family in a list of font familes
		/// </summary>
		/// <param name="fontFamilies">A pointer to a list of font families</param>
		/// <param name="index">the index  in the list to check</param>
		/// <param name="charactersInName">A count of the characters in the name returned</param>
		/// <returns>A pointer to the font family name</returns>
		[DllImport(DllName)]
		private static extern IntPtr GetFontFamilyAtIndex(IntPtr fontFamilies,
														int index,
														ref int charactersInName);

		/// <summary>
		/// Registers a folder to read fonts from when using the freetype library
		/// </summary>
		/// <param name="dirPath">Absolute path of a folder to watch</param>
		/// <returns>True on success, otherwise false</returns>
		[DllImport(DllName)]
		public static extern bool AddFontDir(string dirPath);

		/// <summary>
		/// helper function that returns a string to a font family name
		/// </summary>
		/// <param name="fontFamilies">A list of font families</param>
		/// <param name="index">The index in the list</param>
		/// <returns>a string of a font family name</returns>
		public static string GetFontFamilyAtIndex(IntPtr fontFamilies, int index)
		{
			int chars = 0;
			IntPtr i = GetFontFamilyAtIndex(fontFamilies, index, ref chars);

			return Marshal.PtrToStringAnsi(i);
		}

		public static string GetFontFaceAtIndex(IntPtr fontFaces, int index)
		{
			int chars = 0;
			IntPtr i = GetFontFaceAtIndex(fontFaces, index, ref chars);

			return Marshal.PtrToStringAnsi(i);
		}

		[DllImport(DllName)]
		private static extern void GetCharacterRects(uint index, IntPtr rects, int count);

		public static Rectangle[] GetCharacterRects(uint index, int count)
		{
			Rectangle[] r = new Rectangle[count];
			int structSize = Marshal.SizeOf(typeof(Rectangle));
			IntPtr p = Marshal.AllocHGlobal(structSize * count);
			GetCharacterRects(index, p, count);
			byte[] b = new byte[structSize * count];

			Marshal.Copy(p, b, 0, structSize * count);
			IntPtr item = Marshal.AllocHGlobal(structSize);

			for (int i = 0; i < count; i++)
			{
				Marshal.Copy(b, structSize * i, item, structSize);
				r[i] = Marshal.PtrToStructure<Rectangle>(item);
			}

			Marshal.FreeHGlobal(item);

			Marshal.FreeHGlobal(p);
			return r;
		}
	}
}
